#!/usr/bin/python3
# -*- coding: utf-8 -*-

import argparse
import os
import re

usernameFilePath = "/tmp/users.txt"
passwordFilePath = "/tmp/pass.txt"

def main():
    parser = argparse.ArgumentParser(
                    prog='generic scanner',
                    description='Generic scanner')
    parser.add_argument('credfile', help="file that contains creds. each row has the format <username>:<password>")
    parser.add_argument('command', help="command to run. Use {user}/{pass} to replace with each username/password and {user_file}/{pass_file} to generate a temp file with usernames/passwords", nargs=argparse.REMAINDER)
    args = parser.parse_args()
    credFile = args.credfile
    commandTemplate = ' '.join(args.command)
    usernames = []
    passwords = []
    with open(credFile) as f:
        for cred in f:
            parts = cred.strip().split(':')
            username = parts[0]
            password = ":".join(parts[1:])
            usernames.append(username)
            passwords.append(password)

    userFilePattern = "{.*?user_file.*?}"
    passFilePattern = "{.*?pass_file.*?}"
    userFileMatch = re.search(userFilePattern, commandTemplate)
    passFileMatch = re.search(passFilePattern, commandTemplate)

    # handle username file generation
    if userFileMatch is not None:
        with open(usernameFilePath, "w") as f:
            unique_usernames = []
            for username in usernames:
                if username not in unique_usernames:
                    unique_usernames.append(username)
            f.write("\n".join(unique_usernames))
        stringMatch = userFileMatch.group()
        matchWithFile = stringMatch.replace("user_file", usernameFilePath)
        matchWithFile = matchWithFile[1:-1]
        commandTemplate = re.sub(userFilePattern, matchWithFile, commandTemplate)

    # handle password file generation
    if passFileMatch is not None:
        with open(passwordFilePath, "w") as f:
            unique_passwords = []
            for password in passwords:
                if password not in unique_passwords:
                    unique_passwords.append(password)
            f.write("\n".join(unique_passwords))
        stringMatch = passFileMatch.group()
        matchWithFile = stringMatch.replace("pass_file", passwordFilePath)
        matchWithFile = matchWithFile[1:-1]
        commandTemplate = re.sub(passFilePattern, matchWithFile, commandTemplate)

    # determine if running 1 command or the command multiple times
    userCredPattern = "{.*?user.*?}"
    passCredPattern = "{.*?pass.*?}"
    credMatch = re.search(f"{userCredPattern}|{passCredPattern}", commandTemplate)
    if credMatch is not None:
        # execute command multiple times
        if len(usernames) != len(passwords):
            print(f"length of usernames: {len(usernames)} does not equal length of passwords: {len(passwords)}")
            return
        
        for i in range(len(usernames)):
            commandString = commandTemplate
            userMatch = re.search(userCredPattern, commandString)
            if userMatch is not None:
                stringMatch = userMatch.group()
                matchWithUser = ""
                if len(usernames[i]) > 0:
                    matchWithUser = stringMatch.replace("user", usernames[i])
                    matchWithUser = matchWithUser[1:-1]
                commandString = re.sub(userCredPattern, matchWithUser, commandString)


            passMatch = re.search(passCredPattern, commandString)
            if passMatch is not None:
                stringMatch = passMatch.group()
                matchWithPass = ""
                if len(passwords[i]) > 0:
                    matchWithPass = stringMatch.replace("pass", passwords[i])
                    matchWithPass = matchWithPass[1:-1]
                commandString = re.sub(passCredPattern, matchWithPass, commandString)

            print(f"running: {commandString}")
            os.system(commandString)
            
    else:
        # execute once
        print(f"running: {commandTemplate}")
        os.system(commandTemplate)



    # clean up tmp files
    if userFileMatch is not None:
        os.remove(usernameFilePath)

    if passFileMatch is not None:
        os.remove(passwordFilePath)

if __name__ == '__main__':
    main()